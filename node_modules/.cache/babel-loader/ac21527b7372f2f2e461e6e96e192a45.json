{"ast":null,"code":"/**\n * Calculate offset\n * basing on element's settings like:\n * - anchor\n * - offset\n *\n * @param  {Node} el [Dom element]\n * @return {Integer} [Final offset that will be used to trigger animation in good position]\n */\nimport getOffset from './../libs/offset';\nimport getInlineOption from './getInlineOption';\nexport const getPositionIn = (el, defaultOffset, defaultAnchorPlacement) => {\n  const windowHeight = window.innerHeight;\n  const anchor = getInlineOption(el, 'anchor');\n  const inlineAnchorPlacement = getInlineOption(el, 'anchor-placement');\n  const additionalOffset = Number(getInlineOption(el, 'offset', inlineAnchorPlacement ? 0 : defaultOffset));\n  const anchorPlacement = inlineAnchorPlacement || defaultAnchorPlacement;\n  let finalEl = el;\n\n  if (anchor && document.querySelectorAll(anchor)) {\n    finalEl = document.querySelectorAll(anchor)[0];\n  }\n\n  let triggerPoint = getOffset(finalEl).top - windowHeight;\n\n  switch (anchorPlacement) {\n    case 'top-bottom':\n      // Default offset\n      break;\n\n    case 'center-bottom':\n      triggerPoint += finalEl.offsetHeight / 2;\n      break;\n\n    case 'bottom-bottom':\n      triggerPoint += finalEl.offsetHeight;\n      break;\n\n    case 'top-center':\n      triggerPoint += windowHeight / 2;\n      break;\n\n    case 'center-center':\n      triggerPoint += windowHeight / 2 + finalEl.offsetHeight / 2;\n      break;\n\n    case 'bottom-center':\n      triggerPoint += windowHeight / 2 + finalEl.offsetHeight;\n      break;\n\n    case 'top-top':\n      triggerPoint += windowHeight;\n      break;\n\n    case 'bottom-top':\n      triggerPoint += windowHeight + finalEl.offsetHeight;\n      break;\n\n    case 'center-top':\n      triggerPoint += windowHeight + finalEl.offsetHeight / 2;\n      break;\n  }\n\n  return triggerPoint + additionalOffset;\n};\nexport const getPositionOut = (el, defaultOffset) => {\n  const windowHeight = window.innerHeight;\n  const anchor = getInlineOption(el, 'anchor');\n  const additionalOffset = getInlineOption(el, 'offset', defaultOffset);\n  let finalEl = el;\n\n  if (anchor && document.querySelectorAll(anchor)) {\n    finalEl = document.querySelectorAll(anchor)[0];\n  }\n\n  const elementOffsetTop = getOffset(finalEl).top;\n  return elementOffsetTop + finalEl.offsetHeight - additionalOffset;\n};","map":{"version":3,"sources":["D:/myportfolio/node_modules/aos/src/js/helpers/offsetCalculator.js"],"names":["getOffset","getInlineOption","getPositionIn","el","defaultOffset","defaultAnchorPlacement","windowHeight","window","innerHeight","anchor","inlineAnchorPlacement","additionalOffset","Number","anchorPlacement","finalEl","document","querySelectorAll","triggerPoint","top","offsetHeight","getPositionOut","elementOffsetTop"],"mappings":"AAAA;;;;;;;;;AAUA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,EAAD,EAAKC,aAAL,EAAoBC,sBAApB,KAA+C;AAC1E,QAAMC,YAAY,GAAGC,MAAM,CAACC,WAA5B;AACA,QAAMC,MAAM,GAAGR,eAAe,CAACE,EAAD,EAAK,QAAL,CAA9B;AACA,QAAMO,qBAAqB,GAAGT,eAAe,CAACE,EAAD,EAAK,kBAAL,CAA7C;AACA,QAAMQ,gBAAgB,GAAGC,MAAM,CAC7BX,eAAe,CAACE,EAAD,EAAK,QAAL,EAAeO,qBAAqB,GAAG,CAAH,GAAON,aAA3C,CADc,CAA/B;AAGA,QAAMS,eAAe,GAAGH,qBAAqB,IAAIL,sBAAjD;AACA,MAAIS,OAAO,GAAGX,EAAd;;AAEA,MAAIM,MAAM,IAAIM,QAAQ,CAACC,gBAAT,CAA0BP,MAA1B,CAAd,EAAiD;AAC/CK,IAAAA,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0BP,MAA1B,EAAkC,CAAlC,CAAV;AACD;;AAED,MAAIQ,YAAY,GAAGjB,SAAS,CAACc,OAAD,CAAT,CAAmBI,GAAnB,GAAyBZ,YAA5C;;AAEA,UAAQO,eAAR;AACE,SAAK,YAAL;AACE;AACA;;AACF,SAAK,eAAL;AACEI,MAAAA,YAAY,IAAIH,OAAO,CAACK,YAAR,GAAuB,CAAvC;AACA;;AACF,SAAK,eAAL;AACEF,MAAAA,YAAY,IAAIH,OAAO,CAACK,YAAxB;AACA;;AACF,SAAK,YAAL;AACEF,MAAAA,YAAY,IAAIX,YAAY,GAAG,CAA/B;AACA;;AACF,SAAK,eAAL;AACEW,MAAAA,YAAY,IAAIX,YAAY,GAAG,CAAf,GAAmBQ,OAAO,CAACK,YAAR,GAAuB,CAA1D;AACA;;AACF,SAAK,eAAL;AACEF,MAAAA,YAAY,IAAIX,YAAY,GAAG,CAAf,GAAmBQ,OAAO,CAACK,YAA3C;AACA;;AACF,SAAK,SAAL;AACEF,MAAAA,YAAY,IAAIX,YAAhB;AACA;;AACF,SAAK,YAAL;AACEW,MAAAA,YAAY,IAAIX,YAAY,GAAGQ,OAAO,CAACK,YAAvC;AACA;;AACF,SAAK,YAAL;AACEF,MAAAA,YAAY,IAAIX,YAAY,GAAGQ,OAAO,CAACK,YAAR,GAAuB,CAAtD;AACA;AA3BJ;;AA8BA,SAAOF,YAAY,GAAGN,gBAAtB;AACD,CA/CM;AAiDP,OAAO,MAAMS,cAAc,GAAG,CAACjB,EAAD,EAAKC,aAAL,KAAuB;AACnD,QAAME,YAAY,GAAGC,MAAM,CAACC,WAA5B;AACA,QAAMC,MAAM,GAAGR,eAAe,CAACE,EAAD,EAAK,QAAL,CAA9B;AACA,QAAMQ,gBAAgB,GAAGV,eAAe,CAACE,EAAD,EAAK,QAAL,EAAeC,aAAf,CAAxC;AACA,MAAIU,OAAO,GAAGX,EAAd;;AAEA,MAAIM,MAAM,IAAIM,QAAQ,CAACC,gBAAT,CAA0BP,MAA1B,CAAd,EAAiD;AAC/CK,IAAAA,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0BP,MAA1B,EAAkC,CAAlC,CAAV;AACD;;AAED,QAAMY,gBAAgB,GAAGrB,SAAS,CAACc,OAAD,CAAT,CAAmBI,GAA5C;AAEA,SAAOG,gBAAgB,GAAGP,OAAO,CAACK,YAA3B,GAA0CR,gBAAjD;AACD,CAbM","sourcesContent":["/**\n * Calculate offset\n * basing on element's settings like:\n * - anchor\n * - offset\n *\n * @param  {Node} el [Dom element]\n * @return {Integer} [Final offset that will be used to trigger animation in good position]\n */\n\nimport getOffset from './../libs/offset';\nimport getInlineOption from './getInlineOption';\n\nexport const getPositionIn = (el, defaultOffset, defaultAnchorPlacement) => {\n  const windowHeight = window.innerHeight;\n  const anchor = getInlineOption(el, 'anchor');\n  const inlineAnchorPlacement = getInlineOption(el, 'anchor-placement');\n  const additionalOffset = Number(\n    getInlineOption(el, 'offset', inlineAnchorPlacement ? 0 : defaultOffset)\n  );\n  const anchorPlacement = inlineAnchorPlacement || defaultAnchorPlacement;\n  let finalEl = el;\n\n  if (anchor && document.querySelectorAll(anchor)) {\n    finalEl = document.querySelectorAll(anchor)[0];\n  }\n\n  let triggerPoint = getOffset(finalEl).top - windowHeight;\n\n  switch (anchorPlacement) {\n    case 'top-bottom':\n      // Default offset\n      break;\n    case 'center-bottom':\n      triggerPoint += finalEl.offsetHeight / 2;\n      break;\n    case 'bottom-bottom':\n      triggerPoint += finalEl.offsetHeight;\n      break;\n    case 'top-center':\n      triggerPoint += windowHeight / 2;\n      break;\n    case 'center-center':\n      triggerPoint += windowHeight / 2 + finalEl.offsetHeight / 2;\n      break;\n    case 'bottom-center':\n      triggerPoint += windowHeight / 2 + finalEl.offsetHeight;\n      break;\n    case 'top-top':\n      triggerPoint += windowHeight;\n      break;\n    case 'bottom-top':\n      triggerPoint += windowHeight + finalEl.offsetHeight;\n      break;\n    case 'center-top':\n      triggerPoint += windowHeight + finalEl.offsetHeight / 2;\n      break;\n  }\n\n  return triggerPoint + additionalOffset;\n};\n\nexport const getPositionOut = (el, defaultOffset) => {\n  const windowHeight = window.innerHeight;\n  const anchor = getInlineOption(el, 'anchor');\n  const additionalOffset = getInlineOption(el, 'offset', defaultOffset);\n  let finalEl = el;\n\n  if (anchor && document.querySelectorAll(anchor)) {\n    finalEl = document.querySelectorAll(anchor)[0];\n  }\n\n  const elementOffsetTop = getOffset(finalEl).top;\n\n  return elementOffsetTop + finalEl.offsetHeight - additionalOffset;\n};\n"]},"metadata":{},"sourceType":"module"}