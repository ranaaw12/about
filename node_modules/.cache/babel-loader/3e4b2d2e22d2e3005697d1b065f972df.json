{"ast":null,"code":"let callback = () => {};\n\nfunction containsAOSNode(nodes) {\n  let i, currentNode, result;\n\n  for (i = 0; i < nodes.length; i += 1) {\n    currentNode = nodes[i];\n\n    if (currentNode.dataset && currentNode.dataset.aos) {\n      return true;\n    }\n\n    result = currentNode.children && containsAOSNode(currentNode.children);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction check(mutations) {\n  if (!mutations) return;\n  mutations.forEach(mutation => {\n    const addedNodes = Array.prototype.slice.call(mutation.addedNodes);\n    const removedNodes = Array.prototype.slice.call(mutation.removedNodes);\n    const allNodes = addedNodes.concat(removedNodes);\n\n    if (containsAOSNode(allNodes)) {\n      return callback();\n    }\n  });\n}\n\nfunction getMutationObserver() {\n  return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n}\n\nfunction isSupported() {\n  return !!getMutationObserver();\n}\n\nfunction ready(selector, fn) {\n  const doc = window.document;\n  const MutationObserver = getMutationObserver();\n  const observer = new MutationObserver(check);\n  callback = fn;\n  observer.observe(doc.documentElement, {\n    childList: true,\n    subtree: true,\n    removedNodes: true\n  });\n}\n\nexport default {\n  isSupported,\n  ready\n};","map":{"version":3,"sources":["D:/myportfolio/node_modules/aos/src/js/libs/observer.js"],"names":["callback","containsAOSNode","nodes","i","currentNode","result","length","dataset","aos","children","check","mutations","forEach","mutation","addedNodes","Array","prototype","slice","call","removedNodes","allNodes","concat","getMutationObserver","window","MutationObserver","WebKitMutationObserver","MozMutationObserver","isSupported","ready","selector","fn","doc","document","observer","observe","documentElement","childList","subtree"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,MAAM,CAAE,CAAvB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAIC,CAAJ,EAAOC,WAAP,EAAoBC,MAApB;;AAEA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAK,CAACI,MAAtB,EAA8BH,CAAC,IAAI,CAAnC,EAAsC;AACpCC,IAAAA,WAAW,GAAGF,KAAK,CAACC,CAAD,CAAnB;;AAEA,QAAIC,WAAW,CAACG,OAAZ,IAAuBH,WAAW,CAACG,OAAZ,CAAoBC,GAA/C,EAAoD;AAClD,aAAO,IAAP;AACD;;AAEDH,IAAAA,MAAM,GAAGD,WAAW,CAACK,QAAZ,IAAwBR,eAAe,CAACG,WAAW,CAACK,QAAb,CAAhD;;AAEA,QAAIJ,MAAJ,EAAY;AACV,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AAED,SAASK,KAAT,CAAeC,SAAf,EAA0B;AACxB,MAAI,CAACA,SAAL,EAAgB;AAEhBA,EAAAA,SAAS,CAACC,OAAV,CAAkBC,QAAQ,IAAI;AAC5B,UAAMC,UAAU,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,QAAQ,CAACC,UAApC,CAAnB;AACA,UAAMK,YAAY,GAAGJ,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,QAAQ,CAACM,YAApC,CAArB;AACA,UAAMC,QAAQ,GAAGN,UAAU,CAACO,MAAX,CAAkBF,YAAlB,CAAjB;;AAEA,QAAIlB,eAAe,CAACmB,QAAD,CAAnB,EAA+B;AAC7B,aAAOpB,QAAQ,EAAf;AACD;AACF,GARD;AASD;;AAED,SAASsB,mBAAT,GAA+B;AAC7B,SACEC,MAAM,CAACC,gBAAP,IACAD,MAAM,CAACE,sBADP,IAEAF,MAAM,CAACG,mBAHT;AAKD;;AAED,SAASC,WAAT,GAAuB;AACrB,SAAO,CAAC,CAACL,mBAAmB,EAA5B;AACD;;AAED,SAASM,KAAT,CAAeC,QAAf,EAAyBC,EAAzB,EAA6B;AAC3B,QAAMC,GAAG,GAAGR,MAAM,CAACS,QAAnB;AACA,QAAMR,gBAAgB,GAAGF,mBAAmB,EAA5C;AAEA,QAAMW,QAAQ,GAAG,IAAIT,gBAAJ,CAAqBd,KAArB,CAAjB;AACAV,EAAAA,QAAQ,GAAG8B,EAAX;AAEAG,EAAAA,QAAQ,CAACC,OAAT,CAAiBH,GAAG,CAACI,eAArB,EAAsC;AACpCC,IAAAA,SAAS,EAAE,IADyB;AAEpCC,IAAAA,OAAO,EAAE,IAF2B;AAGpClB,IAAAA,YAAY,EAAE;AAHsB,GAAtC;AAKD;;AAED,eAAe;AAAEQ,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAf","sourcesContent":["let callback = () => {};\n\nfunction containsAOSNode(nodes) {\n  let i, currentNode, result;\n\n  for (i = 0; i < nodes.length; i += 1) {\n    currentNode = nodes[i];\n\n    if (currentNode.dataset && currentNode.dataset.aos) {\n      return true;\n    }\n\n    result = currentNode.children && containsAOSNode(currentNode.children);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction check(mutations) {\n  if (!mutations) return;\n\n  mutations.forEach(mutation => {\n    const addedNodes = Array.prototype.slice.call(mutation.addedNodes);\n    const removedNodes = Array.prototype.slice.call(mutation.removedNodes);\n    const allNodes = addedNodes.concat(removedNodes);\n\n    if (containsAOSNode(allNodes)) {\n      return callback();\n    }\n  });\n}\n\nfunction getMutationObserver() {\n  return (\n    window.MutationObserver ||\n    window.WebKitMutationObserver ||\n    window.MozMutationObserver\n  );\n}\n\nfunction isSupported() {\n  return !!getMutationObserver();\n}\n\nfunction ready(selector, fn) {\n  const doc = window.document;\n  const MutationObserver = getMutationObserver();\n\n  const observer = new MutationObserver(check);\n  callback = fn;\n\n  observer.observe(doc.documentElement, {\n    childList: true,\n    subtree: true,\n    removedNodes: true\n  });\n}\n\nexport default { isSupported, ready };\n"]},"metadata":{},"sourceType":"module"}